# -*- coding: utf-8 -*-
"""AI-Powered Fake News Detector with Fact Score using ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1boApmGFvA9pbH4rX7GYLO30oMuCWjrxC
"""

pip install transformers scikit-learn beautifulsoup4 newspaper3k requests

from transformers import pipeline

classifier = pipeline("text-classification", model="distilbert-base-uncased-finetuned-sst-2-english")

text = "NASA confirms aliens landed on Earth.Lunar surface may contain water molecules,study says.scientists confirm presence of water in sunlit areas of the moon"
result = classifier(text)
print(result)

def classify_news(text):
    result = classifier(text)[0]
    label = "REAL" if result['label'] == "POSITIVE" else "FAKE"
    score = round(result['score'] * 100, 2)
    return label, score

import requests
from bs4 import BeautifulSoup

def fetch_google_news(query, max_results=5):
    url = f"https://news.google.com/search?q={query}&hl=en-IN&gl=IN&ceid=IN:en"
    headers = {"User-Agent": "Mozilla/5.0"}
    r = requests.get(url, headers=headers)
    soup = BeautifulSoup(r.text, "html.parser")
    links = soup.select("article h3 a")

    if not links:
        print("No news references found for this query.")

    headlines = [link.get_text() for link in links[:max_results]]
    return headlines

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def compute_fact_score(news_text, reference_texts):
    if not reference_texts:
        return 0.0
    texts = [news_text] + reference_texts
    tfidf = TfidfVectorizer().fit_transform(texts)
    sim_matrix = cosine_similarity(tfidf[0:1], tfidf[1:])
    return round(sim_matrix.mean() * 100, 2)

def analyze_news(text):
    print("Classifying news...")
    label, confidence = classify_news(text)
    print(f"Prediction: {label} ({confidence}%)")

    print("\nSearching for similar headlines...")
    references = fetch_google_news(text[:100])
    if not references:
        print("No news references found for this query.")
        fact_score = confidence if label == "REAL" else 100 - confidence
        print(f"\nNo references — using model confidence as proxy.")
    else:
        print(f"Found {len(references)} similar headlines:")
        for ref in references:
            print("•", ref)
        fact_score = compute_fact_score(text, references)
        print(f"\nCalculating fact score...")

    print(f"Fact Score: {fact_score}/100")

    return {
        "prediction": label,
        "confidence": confidence,
        "fact_score": round(fact_score, 2),
        "evidence": references
    }

pip install matplotlib

import matplotlib.pyplot as plt
def plot_prediction(result):
    prediction = result['prediction']
    confidence = result['confidence']
    fact_score = result['fact_score']

    labels = ['Model Confidence', 'Fact Score']
    values = [confidence, fact_score]
    colors = ['green' if prediction == 'REAL' else 'red'] * 2

    plt.figure(figsize=(8, 5))
    bars = plt.bar(labels, values, color=colors, alpha=0.7)

    for bar, val in zip(bars, values):
        plt.text(bar.get_x() + bar.get_width() / 2, val + 2,
                 f"{val:.2f}%", ha='center', va='bottom', fontsize=12)

    plt.ylim(0, 110)
    plt.title(f"Prediction: {prediction} ({confidence:.2f}%)", fontsize=14)
    plt.ylabel("Score (%)")
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()

news_input = "NASA finds evidence of water on the moon"
result = analyze_news(news_input)
plot_prediction(result)